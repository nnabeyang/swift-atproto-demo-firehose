//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comwhtwndtypes {
    public enum BlogEntry_Theme: String, Codable {
        case githubLight = "github-light"
        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            guard let value = Self (rawValue: rawValue) else {
                throw DecodingError.dataCorrupted(.init(codingPath: container.codingPath, debugDescription: "invalid rawValue: \(rawValue)"))
            }
            self = value
        }
        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }
    public enum BlogEntry_Visibility: String, Codable {
        case `public` = "public"
        case url = "url"
        case author = "author"
        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            guard let value = Self (rawValue: rawValue) else {
                throw DecodingError.dataCorrupted(.init(codingPath: container.codingPath, debugDescription: "invalid rawValue: \(rawValue)"))
            }
            self = value
        }
        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }
}

public class comwhtwndtypes_BlogEntry: Codable {
    public let type = "com.whtwnd.blog.entry"
    public var blobs: [comwhtwndtypes.BlogDefs_BlobMetadata]?
    public var content: String
    public var createdAt: String?
    public var isDraft: Bool?
    public var ogp: comwhtwndtypes.BlogDefs_Ogp?
    public var theme: String?
    public var title: String?
    public var visibility: String?

    public init(blobs: [comwhtwndtypes.BlogDefs_BlobMetadata]?, content: String, createdAt: String?, isDraft: Bool?, ogp: comwhtwndtypes.BlogDefs_Ogp?, theme: String?, title: String?, visibility: String?) {
        self.blobs = blobs
        self.content = content
        self.createdAt = createdAt
        self.isDraft = isDraft
        self.ogp = ogp
        self.theme = theme
        self.title = title
        self.visibility = visibility
    }

    enum CodingKeys: String, CodingKey {
        case type = "$type"
        case blobs
        case content
        case createdAt
        case isDraft
        case ogp
        case theme
        case title
        case visibility
    }
}
