//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerCreateAccount_Input: Codable {
        public var did: String?
        public var email: String?
        public var handle: String
        public var inviteCode: String?
        public var password: String?
        public var plcOp: LexiconTypeDecoder?
        public var recoveryKey: String?
        public var verificationCode: String?
        public var verificationPhone: String?

        public init(did: String?, email: String?, handle: String, inviteCode: String?, password: String?, plcOp: LexiconTypeDecoder?, recoveryKey: String?, verificationCode: String?, verificationPhone: String?) {
            self.did = did
            self.email = email
            self.handle = handle
            self.inviteCode = inviteCode
            self.password = password
            self.plcOp = plcOp
            self.recoveryKey = recoveryKey
            self.verificationCode = verificationCode
            self.verificationPhone = verificationPhone
        }

        enum CodingKeys: String, CodingKey {
            case did
            case email
            case handle
            case inviteCode
            case password
            case plcOp
            case recoveryKey
            case verificationCode
            case verificationPhone
        }
    }

    public class ServerCreateAccount_Output: Codable {
        public var accessJwt: String
        public var did: String
        public var didDoc: LexiconTypeDecoder?
        public var handle: String
        public var refreshJwt: String

        public init(accessJwt: String, did: String, didDoc: LexiconTypeDecoder?, handle: String, refreshJwt: String) {
            self.accessJwt = accessJwt
            self.did = did
            self.didDoc = didDoc
            self.handle = handle
            self.refreshJwt = refreshJwt
        }

        enum CodingKeys: String, CodingKey {
            case accessJwt
            case did
            case didDoc
            case handle
            case refreshJwt
        }
    }

    public enum ServerCreateAccount_Error: XRPCError {
        case handlenotavailable(String?)
        case incompatiblediddoc(String?)
        case invalidhandle(String?)
        case invalidinvitecode(String?)
        case invalidpassword(String?)
        case unresolvabledid(String?)
        case unsupporteddomain(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "InvalidHandle":
                self = .invalidhandle(error.message)
            case "InvalidPassword":
                self = .invalidpassword(error.message)
            case "InvalidInviteCode":
                self = .invalidinvitecode(error.message)
            case "HandleNotAvailable":
                self = .handlenotavailable(error.message)
            case "UnsupportedDomain":
                self = .unsupporteddomain(error.message)
            case "UnresolvableDid":
                self = .unresolvabledid(error.message)
            case "IncompatibleDidDoc":
                self = .incompatiblediddoc(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .invalidhandle:
                return "InvalidHandle"
            case .invalidpassword:
                return "InvalidPassword"
            case .invalidinvitecode:
                return "InvalidInviteCode"
            case .handlenotavailable:
                return "HandleNotAvailable"
            case .unsupporteddomain:
                return "UnsupportedDomain"
            case .unresolvabledid:
                return "UnresolvableDid"
            case .incompatiblediddoc:
                return "IncompatibleDidDoc"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .invalidhandle(message):
                return message
            case let .invalidpassword(message):
                return message
            case let .invalidinvitecode(message):
                return message
            case let .handlenotavailable(message):
                return message
            case let .unsupporteddomain(message):
                return message
            case let .unresolvabledid(message):
                return message
            case let .incompatiblediddoc(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerCreateAccount(client: any XRPCClientProtocol, input: ServerCreateAccount_Input) async throws -> ServerCreateAccount_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.createAccount", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw ServerCreateAccount_Error(error: error)
        }
    }
}
