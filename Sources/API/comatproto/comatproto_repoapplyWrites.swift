//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class RepoApplyWrites_Create: Codable {
        public var collection: String
        public var rkey: String?
        public var value: LexiconTypeDecoder

        public init(collection: String, rkey: String?, value: LexiconTypeDecoder) {
            self.collection = collection
            self.rkey = rkey
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case collection
            case rkey
            case value
        }
    }

    public class RepoApplyWrites_Delete: Codable {
        public var collection: String
        public var rkey: String

        public init(collection: String, rkey: String) {
            self.collection = collection
            self.rkey = rkey
        }

        enum CodingKeys: String, CodingKey {
            case collection
            case rkey
        }
    }

    public class RepoApplyWrites_Input: Codable {
        public var repo: String
        public var swapCommit: String?
        public var validate: Bool?
        public var writes: [RepoApplyWrites_Input_Writes_Elem]

        public init(repo: String, swapCommit: String?, validate: Bool?, writes: [RepoApplyWrites_Input_Writes_Elem]) {
            self.repo = repo
            self.swapCommit = swapCommit
            self.validate = validate
            self.writes = writes
        }

        enum CodingKeys: String, CodingKey {
            case repo
            case swapCommit
            case validate
            case writes
        }
    }

    public enum RepoApplyWrites_Input_Writes_Elem: Codable {
        case repoApplyWritesCreate(RepoApplyWrites_Create)
        case repoApplyWritesUpdate(RepoApplyWrites_Update)
        case repoApplyWritesDelete(RepoApplyWrites_Delete)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "com.atproto.repo.applyWrites#create":
                self = try .repoApplyWritesCreate(.init(from: decoder))
            case "com.atproto.repo.applyWrites#update":
                self = try .repoApplyWritesUpdate(.init(from: decoder))
            case "com.atproto.repo.applyWrites#delete":
                self = try .repoApplyWritesDelete(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .repoApplyWritesCreate(value):
                try container.encode("com.atproto.repo.applyWrites#create", forKey: .type)
                try value.encode(to: encoder)
            case let .repoApplyWritesUpdate(value):
                try container.encode("com.atproto.repo.applyWrites#update", forKey: .type)
                try value.encode(to: encoder)
            case let .repoApplyWritesDelete(value):
                try container.encode("com.atproto.repo.applyWrites#delete", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class RepoApplyWrites_Update: Codable {
        public var collection: String
        public var rkey: String
        public var value: LexiconTypeDecoder

        public init(collection: String, rkey: String, value: LexiconTypeDecoder) {
            self.collection = collection
            self.rkey = rkey
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case collection
            case rkey
            case value
        }
    }

    public enum RepoApplyWrites_Error: XRPCError {
        case invalidswap(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "InvalidSwap":
                self = .invalidswap(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .invalidswap:
                return "InvalidSwap"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .invalidswap(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func RepoApplyWrites(client: any XRPCClientProtocol, input: RepoApplyWrites_Input) async throws -> Bool {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.repo.applyWrites", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw RepoApplyWrites_Error(error: error)
        }
    }
}
