//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerCreateInviteCodes_AccountCodes: Codable {
        public var account: String
        public var codes: [String]

        public init(account: String, codes: [String]) {
            self.account = account
            self.codes = codes
        }

        enum CodingKeys: String, CodingKey {
            case account
            case codes
        }
    }

    public class ServerCreateInviteCodes_Input: Codable {
        public var codeCount: Int
        public var forAccounts: [String]?
        public var useCount: Int

        public init(codeCount: Int, forAccounts: [String]?, useCount: Int) {
            self.codeCount = codeCount
            self.forAccounts = forAccounts
            self.useCount = useCount
        }

        enum CodingKeys: String, CodingKey {
            case codeCount
            case forAccounts
            case useCount
        }
    }

    public class ServerCreateInviteCodes_Output: Codable {
        public var codes: [ServerCreateInviteCodes_AccountCodes]

        public init(codes: [ServerCreateInviteCodes_AccountCodes]) {
            self.codes = codes
        }

        enum CodingKeys: String, CodingKey {
            case codes
        }
    }

    public enum ServerCreateInviteCodes_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerCreateInviteCodes(client: any XRPCClientProtocol, input: ServerCreateInviteCodes_Input) async throws -> ServerCreateInviteCodes_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.createInviteCodes", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw ServerCreateInviteCodes_Error(error: error)
        }
    }
}
