//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class RepoCreateRecord_Input: Codable {
        public var collection: String
        public var record: LexiconTypeDecoder
        public var repo: String
        public var rkey: String?
        public var swapCommit: String?
        public var validate: Bool?

        public init(collection: String, record: LexiconTypeDecoder, repo: String, rkey: String?, swapCommit: String?, validate: Bool?) {
            self.collection = collection
            self.record = record
            self.repo = repo
            self.rkey = rkey
            self.swapCommit = swapCommit
            self.validate = validate
        }

        enum CodingKeys: String, CodingKey {
            case collection
            case record
            case repo
            case rkey
            case swapCommit
            case validate
        }
    }

    public class RepoCreateRecord_Output: Codable {
        public var cid: String
        public var uri: String

        public init(cid: String, uri: String) {
            self.cid = cid
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case cid
            case uri
        }
    }

    public enum RepoCreateRecord_Error: XRPCError {
        case invalidswap(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "InvalidSwap":
                self = .invalidswap(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .invalidswap:
                return "InvalidSwap"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .invalidswap(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func RepoCreateRecord(client: any XRPCClientProtocol, input: RepoCreateRecord_Input) async throws -> RepoCreateRecord_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.repo.createRecord", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw RepoCreateRecord_Error(error: error)
        }
    }
}
