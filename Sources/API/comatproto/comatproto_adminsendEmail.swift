//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class AdminSendEmail_Input: Codable {
        public var comment: String?
        public var content: String
        public var recipientDid: String
        public var senderDid: String
        public var subject: String?

        public init(comment: String?, content: String, recipientDid: String, senderDid: String, subject: String?) {
            self.comment = comment
            self.content = content
            self.recipientDid = recipientDid
            self.senderDid = senderDid
            self.subject = subject
        }

        enum CodingKeys: String, CodingKey {
            case comment
            case content
            case recipientDid
            case senderDid
            case subject
        }
    }

    public class AdminSendEmail_Output: Codable {
        public var sent: Bool

        public init(sent: Bool) {
            self.sent = sent
        }

        enum CodingKeys: String, CodingKey {
            case sent
        }
    }

    public enum AdminSendEmail_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func AdminSendEmail(client: any XRPCClientProtocol, input: AdminSendEmail_Input) async throws -> AdminSendEmail_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.admin.sendEmail", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw AdminSendEmail_Error(error: error)
        }
    }
}
