//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class RepoDescribeRepo_Output: Codable {
        public var collections: [String]
        public var did: String
        public var didDoc: LexiconTypeDecoder
        public var handle: String
        public var handleIsCorrect: Bool

        public init(collections: [String], did: String, didDoc: LexiconTypeDecoder, handle: String, handleIsCorrect: Bool) {
            self.collections = collections
            self.did = did
            self.didDoc = didDoc
            self.handle = handle
            self.handleIsCorrect = handleIsCorrect
        }

        enum CodingKeys: String, CodingKey {
            case collections
            case did
            case didDoc
            case handle
            case handleIsCorrect
        }
    }

    public enum RepoDescribeRepo_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func RepoDescribeRepo(client: any XRPCClientProtocol, repo: String) async throws -> RepoDescribeRepo_Output {
        let params: Parameters = ["repo": .string(repo)]
        do {
            return try await client.fetch(endpoint: "com.atproto.repo.describeRepo", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw RepoDescribeRepo_Error(error: error)
        }
    }
}
