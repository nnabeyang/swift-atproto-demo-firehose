//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerCreateAppPassword_AppPassword: Codable {
        public var createdAt: String
        public var name: String
        public var password: String
        public var privileged: Bool?

        public init(createdAt: String, name: String, password: String, privileged: Bool?) {
            self.createdAt = createdAt
            self.name = name
            self.password = password
            self.privileged = privileged
        }

        enum CodingKeys: String, CodingKey {
            case createdAt
            case name
            case password
            case privileged
        }
    }

    public class ServerCreateAppPassword_Input: Codable {
        public var name: String
        public var privileged: Bool?

        public init(name: String, privileged: Bool?) {
            self.name = name
            self.privileged = privileged
        }

        enum CodingKeys: String, CodingKey {
            case name
            case privileged
        }
    }

    public enum ServerCreateAppPassword_Error: XRPCError {
        case accounttakedown(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "AccountTakedown":
                self = .accounttakedown(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .accounttakedown:
                return "AccountTakedown"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .accounttakedown(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerCreateAppPassword(client: any XRPCClientProtocol, input: ServerCreateAppPassword_Input) async throws -> ServerCreateAppPassword_AppPassword {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.createAppPassword", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw ServerCreateAppPassword_Error(error: error)
        }
    }
}
