//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class SyncSubscribeRepos_Account: Codable {
        public var active: Bool
        public var did: String
        public var seq: Int
        public var status: String?
        public var time: String

        public init(active: Bool, did: String, seq: Int, status: String?, time: String) {
            self.active = active
            self.did = did
            self.seq = seq
            self.status = status
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case active
            case did
            case seq
            case status
            case time
        }
    }

    public enum SyncSubscribeRepos_Account_Status: RawRepresentable, Codable {
        public typealias RawValue = String

        case takendown
        case suspended
        case deleted
        case deactivated
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "takendown":
                self = .takendown
            case "suspended":
                self = .suspended
            case "deleted":
                self = .deleted
            case "deactivated":
                self = .deactivated
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .takendown:
                "takendown"
            case .suspended:
                "suspended"
            case .deleted:
                "deleted"
            case .deactivated:
                "deactivated"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class SyncSubscribeRepos_Commit: Codable {
        public var blobs: [LexLink]
        public var blocks: Data
        public var commit: LexLink
        public var ops: [SyncSubscribeRepos_RepoOp]
        public var prev: LexLink?
        public var rebase: Bool
        public var repo: String
        public var rev: String
        public var seq: Int
        public var since: String?
        public var time: String
        public var tooBig: Bool

        public init(blobs: [LexLink], blocks: Data, commit: LexLink, ops: [SyncSubscribeRepos_RepoOp], prev: LexLink?, rebase: Bool, repo: String, rev: String, seq: Int, since: String?, time: String, tooBig: Bool) {
            self.blobs = blobs
            self.blocks = blocks
            self.commit = commit
            self.ops = ops
            self.prev = prev
            self.rebase = rebase
            self.repo = repo
            self.rev = rev
            self.seq = seq
            self.since = since
            self.time = time
            self.tooBig = tooBig
        }

        enum CodingKeys: String, CodingKey {
            case blobs
            case blocks
            case commit
            case ops
            case prev
            case rebase
            case repo
            case rev
            case seq
            case since
            case time
            case tooBig
        }
    }

    public class SyncSubscribeRepos_Handle: Codable {
        public var did: String
        public var handle: String
        public var seq: Int
        public var time: String

        public init(did: String, handle: String, seq: Int, time: String) {
            self.did = did
            self.handle = handle
            self.seq = seq
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case did
            case handle
            case seq
            case time
        }
    }

    public class SyncSubscribeRepos_Identity: Codable {
        public var did: String
        public var handle: String?
        public var seq: Int
        public var time: String

        public init(did: String, handle: String?, seq: Int, time: String) {
            self.did = did
            self.handle = handle
            self.seq = seq
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case did
            case handle
            case seq
            case time
        }
    }

    public class SyncSubscribeRepos_Info: Codable {
        public var message: String?
        public var name: String

        public init(message: String?, name: String) {
            self.message = message
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case message
            case name
        }
    }

    public enum SyncSubscribeRepos_Info_Name: RawRepresentable, Codable {
        public typealias RawValue = String

        case outdatedcursor
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "OutdatedCursor":
                self = .outdatedcursor
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .outdatedcursor:
                "OutdatedCursor"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class SyncSubscribeRepos_Migrate: Codable {
        public var did: String
        public var migrateTo: String?
        public var seq: Int
        public var time: String

        public init(did: String, migrateTo: String?, seq: Int, time: String) {
            self.did = did
            self.migrateTo = migrateTo
            self.seq = seq
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case did
            case migrateTo
            case seq
            case time
        }
    }

    public class SyncSubscribeRepos_RepoOp: Codable {
        public var action: String
        public var cid: LexLink?
        public var path: String

        public init(action: String, cid: LexLink?, path: String) {
            self.action = action
            self.cid = cid
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case action
            case cid
            case path
        }
    }

    public enum SyncSubscribeRepos_RepoOp_Action: RawRepresentable, Codable {
        public typealias RawValue = String

        case create
        case update
        case delete
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "create":
                self = .create
            case "update":
                self = .update
            case "delete":
                self = .delete
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .create:
                "create"
            case .update:
                "update"
            case .delete:
                "delete"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class SyncSubscribeRepos_Tombstone: Codable {
        public var did: String
        public var seq: Int
        public var time: String

        public init(did: String, seq: Int, time: String) {
            self.did = did
            self.seq = seq
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case did
            case seq
            case time
        }
    }
}
