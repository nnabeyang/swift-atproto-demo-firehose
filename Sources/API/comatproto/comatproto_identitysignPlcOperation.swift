//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class IdentitySignPlcOperation_Input: Codable {
        public var alsoKnownAs: [String]?
        public var rotationKeys: [String]?
        public var services: LexiconTypeDecoder?
        public var token: String?
        public var verificationMethods: LexiconTypeDecoder?

        public init(alsoKnownAs: [String]?, rotationKeys: [String]?, services: LexiconTypeDecoder?, token: String?, verificationMethods: LexiconTypeDecoder?) {
            self.alsoKnownAs = alsoKnownAs
            self.rotationKeys = rotationKeys
            self.services = services
            self.token = token
            self.verificationMethods = verificationMethods
        }

        enum CodingKeys: String, CodingKey {
            case alsoKnownAs
            case rotationKeys
            case services
            case token
            case verificationMethods
        }
    }

    public class IdentitySignPlcOperation_Output: Codable {
        public var operation: LexiconTypeDecoder

        public init(operation: LexiconTypeDecoder) {
            self.operation = operation
        }

        enum CodingKeys: String, CodingKey {
            case operation
        }
    }

    public enum IdentitySignPlcOperation_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func IdentitySignPlcOperation(client: any XRPCClientProtocol, input: IdentitySignPlcOperation_Input) async throws -> IdentitySignPlcOperation_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.identity.signPlcOperation", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw IdentitySignPlcOperation_Error(error: error)
        }
    }
}
