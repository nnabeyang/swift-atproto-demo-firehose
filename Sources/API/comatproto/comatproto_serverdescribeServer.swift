//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerDescribeServer_Contact: Codable {
        public var email: String?

        public init(email: String?) {
            self.email = email
        }

        enum CodingKeys: String, CodingKey {
            case email
        }
    }

    public class ServerDescribeServer_Links: Codable {
        public var privacyPolicy: String?
        public var termsOfService: String?

        public init(privacyPolicy: String?, termsOfService: String?) {
            self.privacyPolicy = privacyPolicy
            self.termsOfService = termsOfService
        }

        enum CodingKeys: String, CodingKey {
            case privacyPolicy
            case termsOfService
        }
    }

    public class ServerDescribeServer_Output: Codable {
        public var availableUserDomains: [String]
        public var contact: ServerDescribeServer_Contact?
        public var did: String
        public var inviteCodeRequired: Bool?
        public var links: ServerDescribeServer_Links?
        public var phoneVerificationRequired: Bool?

        public init(availableUserDomains: [String], contact: ServerDescribeServer_Contact?, did: String, inviteCodeRequired: Bool?, links: ServerDescribeServer_Links?, phoneVerificationRequired: Bool?) {
            self.availableUserDomains = availableUserDomains
            self.contact = contact
            self.did = did
            self.inviteCodeRequired = inviteCodeRequired
            self.links = links
            self.phoneVerificationRequired = phoneVerificationRequired
        }

        enum CodingKeys: String, CodingKey {
            case availableUserDomains
            case contact
            case did
            case inviteCodeRequired
            case links
            case phoneVerificationRequired
        }
    }

    public enum ServerDescribeServer_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerDescribeServer(client: any XRPCClientProtocol) async throws -> ServerDescribeServer_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.describeServer", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw ServerDescribeServer_Error(error: error)
        }
    }
}
