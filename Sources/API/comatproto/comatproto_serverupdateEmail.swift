//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerUpdateEmail_Input: Codable {
        public var email: String
        public var emailAuthFactor: Bool?
        public var token: String?

        public init(email: String, emailAuthFactor: Bool?, token: String?) {
            self.email = email
            self.emailAuthFactor = emailAuthFactor
            self.token = token
        }

        enum CodingKeys: String, CodingKey {
            case email
            case emailAuthFactor
            case token
        }
    }

    public enum ServerUpdateEmail_Error: XRPCError {
        case expiredtoken(String?)
        case invalidtoken(String?)
        case tokenrequired(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "ExpiredToken":
                self = .expiredtoken(error.message)
            case "InvalidToken":
                self = .invalidtoken(error.message)
            case "TokenRequired":
                self = .tokenrequired(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .expiredtoken:
                return "ExpiredToken"
            case .invalidtoken:
                return "InvalidToken"
            case .tokenrequired:
                return "TokenRequired"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .expiredtoken(message):
                return message
            case let .invalidtoken(message):
                return message
            case let .tokenrequired(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerUpdateEmail(client: any XRPCClientProtocol, input: ServerUpdateEmail_Input) async throws -> Bool {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.updateEmail", contentType: "application/json", httpMethod: .post, params: params, input: input, retry: true)
        } catch let error as UnExpectedError {
            throw ServerUpdateEmail_Error(error: error)
        }
    }
}
