//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerListAppPasswords_AppPassword: Codable {
        public var createdAt: String
        public var name: String
        public var privileged: Bool?

        public init(createdAt: String, name: String, privileged: Bool?) {
            self.createdAt = createdAt
            self.name = name
            self.privileged = privileged
        }

        enum CodingKeys: String, CodingKey {
            case createdAt
            case name
            case privileged
        }
    }

    public class ServerListAppPasswords_Output: Codable {
        public var passwords: [ServerListAppPasswords_AppPassword]

        public init(passwords: [ServerListAppPasswords_AppPassword]) {
            self.passwords = passwords
        }

        enum CodingKeys: String, CodingKey {
            case passwords
        }
    }

    public enum ServerListAppPasswords_Error: XRPCError {
        case accounttakedown(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "AccountTakedown":
                self = .accounttakedown(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .accounttakedown:
                return "AccountTakedown"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .accounttakedown(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerListAppPasswords(client: any XRPCClientProtocol) async throws -> ServerListAppPasswords_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.listAppPasswords", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw ServerListAppPasswords_Error(error: error)
        }
    }
}
