//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class SyncListRepos_Output: Codable {
        public var cursor: String?
        public var repos: [SyncListRepos_Repo]

        public init(cursor: String?, repos: [SyncListRepos_Repo]) {
            self.cursor = cursor
            self.repos = repos
        }

        enum CodingKeys: String, CodingKey {
            case cursor
            case repos
        }
    }

    public class SyncListRepos_Repo: Codable {
        public var active: Bool?
        public var did: String
        public var head: String
        public var rev: String
        public var status: String?

        public init(active: Bool?, did: String, head: String, rev: String, status: String?) {
            self.active = active
            self.did = did
            self.head = head
            self.rev = rev
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case active
            case did
            case head
            case rev
            case status
        }
    }

    public enum SyncListRepos_Repo_Status: RawRepresentable, Codable {
        public typealias RawValue = String

        case takendown
        case suspended
        case deactivated
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "takendown":
                self = .takendown
            case "suspended":
                self = .suspended
            case "deactivated":
                self = .deactivated
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .takendown:
                "takendown"
            case .suspended:
                "suspended"
            case .deactivated:
                "deactivated"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public enum SyncListRepos_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func SyncListRepos(client: any XRPCClientProtocol, cursor: String?, limit: Int?) async throws -> SyncListRepos_Output {
        let params: Parameters = ["cursor": .string(cursor), "limit": .integer(limit)]
        do {
            return try await client.fetch(endpoint: "com.atproto.sync.listRepos", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw SyncListRepos_Error(error: error)
        }
    }
}
