//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class LabelSubscribeLabels_Info: Codable {
        public var message: String?
        public var name: String

        public init(message: String?, name: String) {
            self.message = message
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case message
            case name
        }
    }

    public enum LabelSubscribeLabels_Info_Name: RawRepresentable, Codable {
        public typealias RawValue = String

        case outdatedcursor
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "OutdatedCursor":
                self = .outdatedcursor
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .outdatedcursor:
                "OutdatedCursor"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class LabelSubscribeLabels_Labels: Codable {
        public var labels: [LabelDefs_Label]
        public var seq: Int

        public init(labels: [LabelDefs_Label], seq: Int) {
            self.labels = labels
            self.seq = seq
        }

        enum CodingKeys: String, CodingKey {
            case labels
            case seq
        }
    }
}
