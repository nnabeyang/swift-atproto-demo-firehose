//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class ServerCheckAccountStatus_Output: Codable {
        public var activated: Bool
        public var expectedBlobs: Int
        public var importedBlobs: Int
        public var indexedRecords: Int
        public var privateStateValues: Int
        public var repoBlocks: Int
        public var repoCommit: String
        public var repoRev: String
        public var validDid: Bool

        public init(activated: Bool, expectedBlobs: Int, importedBlobs: Int, indexedRecords: Int, privateStateValues: Int, repoBlocks: Int, repoCommit: String, repoRev: String, validDid: Bool) {
            self.activated = activated
            self.expectedBlobs = expectedBlobs
            self.importedBlobs = importedBlobs
            self.indexedRecords = indexedRecords
            self.privateStateValues = privateStateValues
            self.repoBlocks = repoBlocks
            self.repoCommit = repoCommit
            self.repoRev = repoRev
            self.validDid = validDid
        }

        enum CodingKeys: String, CodingKey {
            case activated
            case expectedBlobs
            case importedBlobs
            case indexedRecords
            case privateStateValues
            case repoBlocks
            case repoCommit
            case repoRev
            case validDid
        }
    }

    public enum ServerCheckAccountStatus_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func ServerCheckAccountStatus(client: any XRPCClientProtocol) async throws -> ServerCheckAccountStatus_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "com.atproto.server.checkAccountStatus", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw ServerCheckAccountStatus_Error(error: error)
        }
    }
}
