//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension comatprototypes {
    public class RepoGetRecord_Output: Codable {
        public var cid: String?
        public var uri: String
        public var value: LexiconTypeDecoder

        public init(cid: String?, uri: String, value: LexiconTypeDecoder) {
            self.cid = cid
            self.uri = uri
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case cid
            case uri
            case value
        }
    }

    public enum RepoGetRecord_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func RepoGetRecord(client: any XRPCClientProtocol, cid: String?, collection: String, repo: String, rkey: String) async throws -> RepoGetRecord_Output {
        let params: Parameters = ["cid": .string(cid), "collection": .string(collection), "repo": .string(repo), "rkey": .string(rkey)]
        do {
            return try await client.fetch(endpoint: "com.atproto.repo.getRecord", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw RepoGetRecord_Error(error: error)
        }
    }
}
