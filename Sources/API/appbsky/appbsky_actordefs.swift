//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class ActorDefs_AdultContentPref: Codable {
        public var enabled: Bool

        public init(enabled: Bool) {
            self.enabled = enabled
        }

        enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public class ActorDefs_BskyAppProgressGuide: Codable {
        public var guide: String

        public init(guide: String) {
            self.guide = guide
        }

        enum CodingKeys: String, CodingKey {
            case guide
        }
    }

    public class ActorDefs_BskyAppStatePref: Codable {
        public var activeProgressGuide: ActorDefs_BskyAppProgressGuide?
        public var queuedNudges: [String]?

        public init(activeProgressGuide: ActorDefs_BskyAppProgressGuide?, queuedNudges: [String]?) {
            self.activeProgressGuide = activeProgressGuide
            self.queuedNudges = queuedNudges
        }

        enum CodingKeys: String, CodingKey {
            case activeProgressGuide
            case queuedNudges
        }
    }

    public class ActorDefs_ContentLabelPref: Codable {
        public var label: String
        public var labelerDid: String?
        public var visibility: String

        public init(label: String, labelerDid: String?, visibility: String) {
            self.label = label
            self.labelerDid = labelerDid
            self.visibility = visibility
        }

        enum CodingKeys: String, CodingKey {
            case label
            case labelerDid
            case visibility
        }
    }

    public enum ActorDefs_ContentLabelPref_Visibility: RawRepresentable, Codable {
        public typealias RawValue = String

        case ignore
        case show
        case warn
        case hide
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "ignore":
                self = .ignore
            case "show":
                self = .show
            case "warn":
                self = .warn
            case "hide":
                self = .hide
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .ignore:
                "ignore"
            case .show:
                "show"
            case .warn:
                "warn"
            case .hide:
                "hide"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class ActorDefs_FeedViewPref: Codable {
        public var feed: String
        public var hideQuotePosts: Bool?
        public var hideReplies: Bool?
        public var hideRepliesByLikeCount: Int?
        public var hideRepliesByUnfollowed: Bool?
        public var hideReposts: Bool?

        public init(feed: String, hideQuotePosts: Bool?, hideReplies: Bool?, hideRepliesByLikeCount: Int?, hideRepliesByUnfollowed: Bool?, hideReposts: Bool?) {
            self.feed = feed
            self.hideQuotePosts = hideQuotePosts
            self.hideReplies = hideReplies
            self.hideRepliesByLikeCount = hideRepliesByLikeCount
            self.hideRepliesByUnfollowed = hideRepliesByUnfollowed
            self.hideReposts = hideReposts
        }

        enum CodingKeys: String, CodingKey {
            case feed
            case hideQuotePosts
            case hideReplies
            case hideRepliesByLikeCount
            case hideRepliesByUnfollowed
            case hideReposts
        }
    }

    public class ActorDefs_HiddenPostsPref: Codable {
        public var items: [String]

        public init(items: [String]) {
            self.items = items
        }

        enum CodingKeys: String, CodingKey {
            case items
        }
    }

    public class ActorDefs_InterestsPref: Codable {
        public var tags: [String]

        public init(tags: [String]) {
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public class ActorDefs_KnownFollowers: Codable {
        public var count: Int
        public var followers: [ActorDefs_ProfileViewBasic]

        public init(count: Int, followers: [ActorDefs_ProfileViewBasic]) {
            self.count = count
            self.followers = followers
        }

        enum CodingKeys: String, CodingKey {
            case count
            case followers
        }
    }

    public class ActorDefs_LabelerPrefItem: Codable {
        public var did: String

        public init(did: String) {
            self.did = did
        }

        enum CodingKeys: String, CodingKey {
            case did
        }
    }

    public class ActorDefs_LabelersPref: Codable {
        public var labelers: [ActorDefs_LabelerPrefItem]

        public init(labelers: [ActorDefs_LabelerPrefItem]) {
            self.labelers = labelers
        }

        enum CodingKeys: String, CodingKey {
            case labelers
        }
    }

    public class ActorDefs_MutedWord: Codable {
        public var targets: [ActorDefs_MutedWordTarget]
        public var value: String

        public init(targets: [ActorDefs_MutedWordTarget], value: String) {
            self.targets = targets
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case targets
            case value
        }
    }

    public class ActorDefs_MutedWordsPref: Codable {
        public var items: [ActorDefs_MutedWord]

        public init(items: [ActorDefs_MutedWord]) {
            self.items = items
        }

        enum CodingKeys: String, CodingKey {
            case items
        }
    }

    public enum ActorDefs_MutedWordTarget: RawRepresentable, Codable {
        public typealias RawValue = String

        case content
        case tag
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "content":
                self = .content
            case "tag":
                self = .tag
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .content:
                "content"
            case .tag:
                "tag"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class ActorDefs_PersonalDetailsPref: Codable {
        public var birthDate: String?

        public init(birthDate: String?) {
            self.birthDate = birthDate
        }

        enum CodingKeys: String, CodingKey {
            case birthDate
        }
    }

    public enum ActorDefs_Preferences_Elem: Codable {
        case actorDefsAdultContentPref(ActorDefs_AdultContentPref)
        case actorDefsContentLabelPref(ActorDefs_ContentLabelPref)
        case actorDefsSavedFeedsPref(ActorDefs_SavedFeedsPref)
        case actorDefsSavedFeedsPrefV2(ActorDefs_SavedFeedsPrefV2)
        case actorDefsPersonalDetailsPref(ActorDefs_PersonalDetailsPref)
        case actorDefsFeedViewPref(ActorDefs_FeedViewPref)
        case actorDefsThreadViewPref(ActorDefs_ThreadViewPref)
        case actorDefsInterestsPref(ActorDefs_InterestsPref)
        case actorDefsMutedWordsPref(ActorDefs_MutedWordsPref)
        case actorDefsHiddenPostsPref(ActorDefs_HiddenPostsPref)
        case actorDefsBskyAppStatePref(ActorDefs_BskyAppStatePref)
        case actorDefsLabelersPref(ActorDefs_LabelersPref)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.actor.defs#adultContentPref":
                self = try .actorDefsAdultContentPref(.init(from: decoder))
            case "app.bsky.actor.defs#contentLabelPref":
                self = try .actorDefsContentLabelPref(.init(from: decoder))
            case "app.bsky.actor.defs#savedFeedsPref":
                self = try .actorDefsSavedFeedsPref(.init(from: decoder))
            case "app.bsky.actor.defs#savedFeedsPrefV2":
                self = try .actorDefsSavedFeedsPrefV2(.init(from: decoder))
            case "app.bsky.actor.defs#personalDetailsPref":
                self = try .actorDefsPersonalDetailsPref(.init(from: decoder))
            case "app.bsky.actor.defs#feedViewPref":
                self = try .actorDefsFeedViewPref(.init(from: decoder))
            case "app.bsky.actor.defs#threadViewPref":
                self = try .actorDefsThreadViewPref(.init(from: decoder))
            case "app.bsky.actor.defs#interestsPref":
                self = try .actorDefsInterestsPref(.init(from: decoder))
            case "app.bsky.actor.defs#mutedWordsPref":
                self = try .actorDefsMutedWordsPref(.init(from: decoder))
            case "app.bsky.actor.defs#hiddenPostsPref":
                self = try .actorDefsHiddenPostsPref(.init(from: decoder))
            case "app.bsky.actor.defs#bskyAppStatePref":
                self = try .actorDefsBskyAppStatePref(.init(from: decoder))
            case "app.bsky.actor.defs#labelersPref":
                self = try .actorDefsLabelersPref(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .actorDefsAdultContentPref(value):
                try container.encode("app.bsky.actor.defs#adultContentPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsContentLabelPref(value):
                try container.encode("app.bsky.actor.defs#contentLabelPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsSavedFeedsPref(value):
                try container.encode("app.bsky.actor.defs#savedFeedsPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsSavedFeedsPrefV2(value):
                try container.encode("app.bsky.actor.defs#savedFeedsPrefV2", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsPersonalDetailsPref(value):
                try container.encode("app.bsky.actor.defs#personalDetailsPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsFeedViewPref(value):
                try container.encode("app.bsky.actor.defs#feedViewPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsThreadViewPref(value):
                try container.encode("app.bsky.actor.defs#threadViewPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsInterestsPref(value):
                try container.encode("app.bsky.actor.defs#interestsPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsMutedWordsPref(value):
                try container.encode("app.bsky.actor.defs#mutedWordsPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsHiddenPostsPref(value):
                try container.encode("app.bsky.actor.defs#hiddenPostsPref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsBskyAppStatePref(value):
                try container.encode("app.bsky.actor.defs#bskyAppStatePref", forKey: .type)
                try value.encode(to: encoder)
            case let .actorDefsLabelersPref(value):
                try container.encode("app.bsky.actor.defs#labelersPref", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class ActorDefs_ProfileAssociated: Codable {
        public var chat: ActorDefs_ProfileAssociatedChat?
        public var feedgens: Int?
        public var labeler: Bool?
        public var lists: Int?
        public var starterPacks: Int?

        public init(chat: ActorDefs_ProfileAssociatedChat?, feedgens: Int?, labeler: Bool?, lists: Int?, starterPacks: Int?) {
            self.chat = chat
            self.feedgens = feedgens
            self.labeler = labeler
            self.lists = lists
            self.starterPacks = starterPacks
        }

        enum CodingKeys: String, CodingKey {
            case chat
            case feedgens
            case labeler
            case lists
            case starterPacks
        }
    }

    public class ActorDefs_ProfileAssociatedChat: Codable {
        public var allowIncoming: String

        public init(allowIncoming: String) {
            self.allowIncoming = allowIncoming
        }

        enum CodingKeys: String, CodingKey {
            case allowIncoming
        }
    }

    public enum ActorDefs_ProfileAssociatedChat_AllowIncoming: RawRepresentable, Codable {
        public typealias RawValue = String

        case all
        case none
        case following
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "all":
                self = .all
            case "none":
                self = .none
            case "following":
                self = .following
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .all:
                "all"
            case .none:
                "none"
            case .following:
                "following"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class ActorDefs_ProfileView: Codable {
        public var associated: ActorDefs_ProfileAssociated?
        public var avatar: String?
        public var createdAt: String?
        public var description: String?
        public var did: String
        public var displayName: String?
        public var handle: String
        public var indexedAt: String?
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var viewer: ActorDefs_ViewerState?

        public init(associated: ActorDefs_ProfileAssociated?, avatar: String?, createdAt: String?, description: String?, did: String, displayName: String?, handle: String, indexedAt: String?, labels: [comatprototypes.LabelDefs_Label]?, viewer: ActorDefs_ViewerState?) {
            self.associated = associated
            self.avatar = avatar
            self.createdAt = createdAt
            self.description = description
            self.did = did
            self.displayName = displayName
            self.handle = handle
            self.indexedAt = indexedAt
            self.labels = labels
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case associated
            case avatar
            case createdAt
            case description
            case did
            case displayName
            case handle
            case indexedAt
            case labels
            case viewer
        }
    }

    public class ActorDefs_ProfileViewBasic: Codable {
        public var associated: ActorDefs_ProfileAssociated?
        public var avatar: String?
        public var createdAt: String?
        public var did: String
        public var displayName: String?
        public var handle: String
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var viewer: ActorDefs_ViewerState?

        public init(associated: ActorDefs_ProfileAssociated?, avatar: String?, createdAt: String?, did: String, displayName: String?, handle: String, labels: [comatprototypes.LabelDefs_Label]?, viewer: ActorDefs_ViewerState?) {
            self.associated = associated
            self.avatar = avatar
            self.createdAt = createdAt
            self.did = did
            self.displayName = displayName
            self.handle = handle
            self.labels = labels
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case associated
            case avatar
            case createdAt
            case did
            case displayName
            case handle
            case labels
            case viewer
        }
    }

    public class ActorDefs_ProfileViewDetailed: Codable {
        public var associated: ActorDefs_ProfileAssociated?
        public var avatar: String?
        public var banner: String?
        public var createdAt: String?
        public var description: String?
        public var did: String
        public var displayName: String?
        public var followersCount: Int?
        public var followsCount: Int?
        public var handle: String
        public var indexedAt: String?
        public var joinedViaStarterPack: GraphDefs_StarterPackViewBasic?
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var postsCount: Int?
        public var viewer: ActorDefs_ViewerState?

        public init(associated: ActorDefs_ProfileAssociated?, avatar: String?, banner: String?, createdAt: String?, description: String?, did: String, displayName: String?, followersCount: Int?, followsCount: Int?, handle: String, indexedAt: String?, joinedViaStarterPack: GraphDefs_StarterPackViewBasic?, labels: [comatprototypes.LabelDefs_Label]?, postsCount: Int?, viewer: ActorDefs_ViewerState?) {
            self.associated = associated
            self.avatar = avatar
            self.banner = banner
            self.createdAt = createdAt
            self.description = description
            self.did = did
            self.displayName = displayName
            self.followersCount = followersCount
            self.followsCount = followsCount
            self.handle = handle
            self.indexedAt = indexedAt
            self.joinedViaStarterPack = joinedViaStarterPack
            self.labels = labels
            self.postsCount = postsCount
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case associated
            case avatar
            case banner
            case createdAt
            case description
            case did
            case displayName
            case followersCount
            case followsCount
            case handle
            case indexedAt
            case joinedViaStarterPack
            case labels
            case postsCount
            case viewer
        }
    }

    public class ActorDefs_SavedFeed: Codable {
        public var id: String
        public var pinned: Bool
        public var type: String
        public var value: String

        public init(id: String, pinned: Bool, type: String, value: String) {
            self.id = id
            self.pinned = pinned
            self.type = type
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case id
            case pinned
            case type
            case value
        }
    }

    public enum ActorDefs_SavedFeed_Type: RawRepresentable, Codable {
        public typealias RawValue = String

        case feed
        case list
        case timeline
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "feed":
                self = .feed
            case "list":
                self = .list
            case "timeline":
                self = .timeline
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .feed:
                "feed"
            case .list:
                "list"
            case .timeline:
                "timeline"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class ActorDefs_SavedFeedsPref: Codable {
        public var pinned: [String]
        public var saved: [String]
        public var timelineIndex: Int?

        public init(pinned: [String], saved: [String], timelineIndex: Int?) {
            self.pinned = pinned
            self.saved = saved
            self.timelineIndex = timelineIndex
        }

        enum CodingKeys: String, CodingKey {
            case pinned
            case saved
            case timelineIndex
        }
    }

    public class ActorDefs_SavedFeedsPrefV2: Codable {
        public var items: [ActorDefs_SavedFeed]

        public init(items: [ActorDefs_SavedFeed]) {
            self.items = items
        }

        enum CodingKeys: String, CodingKey {
            case items
        }
    }

    public class ActorDefs_ThreadViewPref: Codable {
        public var prioritizeFollowedUsers: Bool?
        public var sort: String?

        public init(prioritizeFollowedUsers: Bool?, sort: String?) {
            self.prioritizeFollowedUsers = prioritizeFollowedUsers
            self.sort = sort
        }

        enum CodingKeys: String, CodingKey {
            case prioritizeFollowedUsers
            case sort
        }
    }

    public enum ActorDefs_ThreadViewPref_Sort: RawRepresentable, Codable {
        public typealias RawValue = String

        case oldest
        case newest
        case mostLikes
        case random
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "oldest":
                self = .oldest
            case "newest":
                self = .newest
            case "most-likes":
                self = .mostLikes
            case "random":
                self = .random
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .oldest:
                "oldest"
            case .newest:
                "newest"
            case .mostLikes:
                "most-likes"
            case .random:
                "random"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class ActorDefs_ViewerState: Codable {
        public var blockedBy: Bool?
        public var blocking: String?
        public var blockingByList: GraphDefs_ListViewBasic?
        public var followedBy: String?
        public var following: String?
        public var knownFollowers: ActorDefs_KnownFollowers?
        public var muted: Bool?
        public var mutedByList: GraphDefs_ListViewBasic?

        public init(blockedBy: Bool?, blocking: String?, blockingByList: GraphDefs_ListViewBasic?, followedBy: String?, following: String?, knownFollowers: ActorDefs_KnownFollowers?, muted: Bool?, mutedByList: GraphDefs_ListViewBasic?) {
            self.blockedBy = blockedBy
            self.blocking = blocking
            self.blockingByList = blockingByList
            self.followedBy = followedBy
            self.following = following
            self.knownFollowers = knownFollowers
            self.muted = muted
            self.mutedByList = mutedByList
        }

        enum CodingKeys: String, CodingKey {
            case blockedBy
            case blocking
            case blockingByList
            case followedBy
            case following
            case knownFollowers
            case muted
            case mutedByList
        }
    }
}
