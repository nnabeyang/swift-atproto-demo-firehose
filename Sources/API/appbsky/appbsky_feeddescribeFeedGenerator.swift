//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class FeedDescribeFeedGenerator_Feed: Codable {
        public var uri: String

        public init(uri: String) {
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case uri
        }
    }

    public class FeedDescribeFeedGenerator_Links: Codable {
        public var privacyPolicy: String?
        public var termsOfService: String?

        public init(privacyPolicy: String?, termsOfService: String?) {
            self.privacyPolicy = privacyPolicy
            self.termsOfService = termsOfService
        }

        enum CodingKeys: String, CodingKey {
            case privacyPolicy
            case termsOfService
        }
    }

    public class FeedDescribeFeedGenerator_Output: Codable {
        public var did: String
        public var feeds: [FeedDescribeFeedGenerator_Feed]
        public var links: FeedDescribeFeedGenerator_Links?

        public init(did: String, feeds: [FeedDescribeFeedGenerator_Feed], links: FeedDescribeFeedGenerator_Links?) {
            self.did = did
            self.feeds = feeds
            self.links = links
        }

        enum CodingKeys: String, CodingKey {
            case did
            case feeds
            case links
        }
    }

    public enum FeedDescribeFeedGenerator_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func FeedDescribeFeedGenerator(client: any XRPCClientProtocol) async throws -> FeedDescribeFeedGenerator_Output {
        let params: Bool? = nil
        do {
            return try await client.fetch(endpoint: "app.bsky.feed.describeFeedGenerator", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw FeedDescribeFeedGenerator_Error(error: error)
        }
    }
}
