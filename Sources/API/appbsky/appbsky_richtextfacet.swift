//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class RichtextFacet: Codable {
        public var features: [RichtextFacet_Features_Elem]
        public var index: RichtextFacet_ByteSlice

        public init(features: [RichtextFacet_Features_Elem], index: RichtextFacet_ByteSlice) {
            self.features = features
            self.index = index
        }

        enum CodingKeys: String, CodingKey {
            case features
            case index
        }
    }

    public class RichtextFacet_ByteSlice: Codable {
        public var byteEnd: Int
        public var byteStart: Int

        public init(byteEnd: Int, byteStart: Int) {
            self.byteEnd = byteEnd
            self.byteStart = byteStart
        }

        enum CodingKeys: String, CodingKey {
            case byteEnd
            case byteStart
        }
    }

    public enum RichtextFacet_Features_Elem: Codable {
        case richtextFacetMention(RichtextFacet_Mention)
        case richtextFacetLink(RichtextFacet_Link)
        case richtextFacetTag(RichtextFacet_Tag)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.richtext.facet#mention":
                self = try .richtextFacetMention(.init(from: decoder))
            case "app.bsky.richtext.facet#link":
                self = try .richtextFacetLink(.init(from: decoder))
            case "app.bsky.richtext.facet#tag":
                self = try .richtextFacetTag(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .richtextFacetMention(value):
                try container.encode("app.bsky.richtext.facet#mention", forKey: .type)
                try value.encode(to: encoder)
            case let .richtextFacetLink(value):
                try container.encode("app.bsky.richtext.facet#link", forKey: .type)
                try value.encode(to: encoder)
            case let .richtextFacetTag(value):
                try container.encode("app.bsky.richtext.facet#tag", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class RichtextFacet_Link: Codable {
        public var uri: String

        public init(uri: String) {
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case uri
        }
    }

    public class RichtextFacet_Mention: Codable {
        public var did: String

        public init(did: String) {
            self.did = did
        }

        enum CodingKeys: String, CodingKey {
            case did
        }
    }

    public class RichtextFacet_Tag: Codable {
        public var tag: String

        public init(tag: String) {
            self.tag = tag
        }

        enum CodingKeys: String, CodingKey {
            case tag
        }
    }
}
