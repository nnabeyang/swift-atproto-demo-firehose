//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class GraphGetRelationships_Output: Codable {
        public var actor: String?
        public var relationships: [GraphGetRelationships_Output_Relationships_Elem]

        public init(actor: String?, relationships: [GraphGetRelationships_Output_Relationships_Elem]) {
            self.actor = actor
            self.relationships = relationships
        }

        enum CodingKeys: String, CodingKey {
            case actor
            case relationships
        }
    }

    public enum GraphGetRelationships_Output_Relationships_Elem: Codable {
        case graphDefsRelationship(GraphDefs_Relationship)
        case graphDefsNotFoundActor(GraphDefs_NotFoundActor)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.graph.defs#relationship":
                self = try .graphDefsRelationship(.init(from: decoder))
            case "app.bsky.graph.defs#notFoundActor":
                self = try .graphDefsNotFoundActor(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .graphDefsRelationship(value):
                try container.encode("app.bsky.graph.defs#relationship", forKey: .type)
                try value.encode(to: encoder)
            case let .graphDefsNotFoundActor(value):
                try container.encode("app.bsky.graph.defs#notFoundActor", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public enum GraphGetRelationships_Error: XRPCError {
        case actornotfound(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "ActorNotFound":
                self = .actornotfound(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .actornotfound:
                return "ActorNotFound"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .actornotfound(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func GraphGetRelationships(client: any XRPCClientProtocol, actor: String, others: [String]?) async throws -> GraphGetRelationships_Output {
        let params: Parameters = ["actor": .string(actor), "others": .array(others)]
        do {
            return try await client.fetch(endpoint: "app.bsky.graph.getRelationships", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw GraphGetRelationships_Error(error: error)
        }
    }
}
