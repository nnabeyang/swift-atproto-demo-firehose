//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public enum FeedThreadgate_Allow_Elem: Codable {
        case feedThreadgateMentionRule(FeedThreadgate_MentionRule)
        case feedThreadgateFollowingRule(FeedThreadgate_FollowingRule)
        case feedThreadgateListRule(FeedThreadgate_ListRule)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.threadgate#mentionRule":
                self = try .feedThreadgateMentionRule(.init(from: decoder))
            case "app.bsky.feed.threadgate#followingRule":
                self = try .feedThreadgateFollowingRule(.init(from: decoder))
            case "app.bsky.feed.threadgate#listRule":
                self = try .feedThreadgateListRule(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedThreadgateMentionRule(value):
                try container.encode("app.bsky.feed.threadgate#mentionRule", forKey: .type)
                try value.encode(to: encoder)
            case let .feedThreadgateFollowingRule(value):
                try container.encode("app.bsky.feed.threadgate#followingRule", forKey: .type)
                try value.encode(to: encoder)
            case let .feedThreadgateListRule(value):
                try container.encode("app.bsky.feed.threadgate#listRule", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedThreadgate_FollowingRule: Codable {
        public let type = "app.bsky.feed.threadgate#followingRule"

        public init() {
        }

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }
    }

    public class FeedThreadgate_ListRule: Codable {
        public var list: String

        public init(list: String) {
            self.list = list
        }

        enum CodingKeys: String, CodingKey {
            case list
        }
    }

    public class FeedThreadgate_MentionRule: Codable {
        public let type = "app.bsky.feed.threadgate#mentionRule"

        public init() {
        }

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }
    }
}

public class appbskytypes_FeedThreadgate: Codable {
    public let type = "app.bsky.feed.threadgate"
    public var allow: [appbskytypes.FeedThreadgate_Allow_Elem]?
    public var createdAt: String
    public var post: String

    public init(allow: [appbskytypes.FeedThreadgate_Allow_Elem]?, createdAt: String, post: String) {
        self.allow = allow
        self.createdAt = createdAt
        self.post = post
    }

    enum CodingKeys: String, CodingKey {
        case type = "$type"
        case allow
        case createdAt
        case post
    }
}
