//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class FeedGetLikes_Like: Codable {
        public var actor: ActorDefs_ProfileView
        public var createdAt: String
        public var indexedAt: String

        public init(actor: ActorDefs_ProfileView, createdAt: String, indexedAt: String) {
            self.actor = actor
            self.createdAt = createdAt
            self.indexedAt = indexedAt
        }

        enum CodingKeys: String, CodingKey {
            case actor
            case createdAt
            case indexedAt
        }
    }

    public class FeedGetLikes_Output: Codable {
        public var cid: String?
        public var cursor: String?
        public var likes: [FeedGetLikes_Like]
        public var uri: String

        public init(cid: String?, cursor: String?, likes: [FeedGetLikes_Like], uri: String) {
            self.cid = cid
            self.cursor = cursor
            self.likes = likes
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case cid
            case cursor
            case likes
            case uri
        }
    }

    public enum FeedGetLikes_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func FeedGetLikes(client: any XRPCClientProtocol, cid: String?, cursor: String?, limit: Int?, uri: String) async throws -> FeedGetLikes_Output {
        let params: Parameters = ["cid": .string(cid), "cursor": .string(cursor), "limit": .integer(limit), "uri": .string(uri)]
        do {
            return try await client.fetch(endpoint: "app.bsky.feed.getLikes", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw FeedGetLikes_Error(error: error)
        }
    }
}
