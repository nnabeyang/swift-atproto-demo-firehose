//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class FeedDefs_BlockedAuthor: Codable {
        public var did: String
        public var viewer: ActorDefs_ViewerState?

        public init(did: String, viewer: ActorDefs_ViewerState?) {
            self.did = did
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case did
            case viewer
        }
    }

    public class FeedDefs_BlockedPost: Codable {
        public var author: FeedDefs_BlockedAuthor
        public var blocked: Bool
        public var uri: String

        public init(author: FeedDefs_BlockedAuthor, blocked: Bool, uri: String) {
            self.author = author
            self.blocked = blocked
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case author
            case blocked
            case uri
        }
    }

    public class FeedDefs_FeedViewPost: Codable {
        public var feedContext: String?
        public var post: FeedDefs_PostView
        public var reason: FeedDefs_FeedViewPost_Reason?
        public var reply: FeedDefs_ReplyRef?

        public init(feedContext: String?, post: FeedDefs_PostView, reason: FeedDefs_FeedViewPost_Reason?, reply: FeedDefs_ReplyRef?) {
            self.feedContext = feedContext
            self.post = post
            self.reason = reason
            self.reply = reply
        }

        enum CodingKeys: String, CodingKey {
            case feedContext
            case post
            case reason
            case reply
        }
    }

    public enum FeedDefs_FeedViewPost_Reason: Codable {
        case feedDefsReasonRepost(FeedDefs_ReasonRepost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#reasonRepost":
                self = try .feedDefsReasonRepost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsReasonRepost(value):
                try container.encode("app.bsky.feed.defs#reasonRepost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedDefs_GeneratorView: Codable {
        public var acceptsInteractions: Bool?
        public var avatar: String?
        public var cid: String
        public var creator: ActorDefs_ProfileView
        public var description: String?
        public var descriptionFacets: [RichtextFacet]?
        public var did: String
        public var displayName: String
        public var indexedAt: String
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var likeCount: Int?
        public var uri: String
        public var viewer: FeedDefs_GeneratorViewerState?

        public init(acceptsInteractions: Bool?, avatar: String?, cid: String, creator: ActorDefs_ProfileView, description: String?, descriptionFacets: [RichtextFacet]?, did: String, displayName: String, indexedAt: String, labels: [comatprototypes.LabelDefs_Label]?, likeCount: Int?, uri: String, viewer: FeedDefs_GeneratorViewerState?) {
            self.acceptsInteractions = acceptsInteractions
            self.avatar = avatar
            self.cid = cid
            self.creator = creator
            self.description = description
            self.descriptionFacets = descriptionFacets
            self.did = did
            self.displayName = displayName
            self.indexedAt = indexedAt
            self.labels = labels
            self.likeCount = likeCount
            self.uri = uri
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case acceptsInteractions
            case avatar
            case cid
            case creator
            case description
            case descriptionFacets
            case did
            case displayName
            case indexedAt
            case labels
            case likeCount
            case uri
            case viewer
        }
    }

    public class FeedDefs_GeneratorViewerState: Codable {
        public var like: String?

        public init(like: String?) {
            self.like = like
        }

        enum CodingKeys: String, CodingKey {
            case like
        }
    }

    public class FeedDefs_Interaction: Codable {
        public var event: String?
        public var feedContext: String?
        public var item: String?

        public init(event: String?, feedContext: String?, item: String?) {
            self.event = event
            self.feedContext = feedContext
            self.item = item
        }

        enum CodingKeys: String, CodingKey {
            case event
            case feedContext
            case item
        }
    }

    public enum FeedDefs_Interaction_Event: RawRepresentable, Codable {
        public typealias RawValue = String

        case appBskyFeedDefsRequestless
        case appBskyFeedDefsRequestmore
        case appBskyFeedDefsClickthroughitem
        case appBskyFeedDefsClickthroughauthor
        case appBskyFeedDefsClickthroughreposter
        case appBskyFeedDefsClickthroughembed
        case appBskyFeedDefsInteractionseen
        case appBskyFeedDefsInteractionlike
        case appBskyFeedDefsInteractionrepost
        case appBskyFeedDefsInteractionreply
        case appBskyFeedDefsInteractionquote
        case appBskyFeedDefsInteractionshare
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "app.bsky.feed.defs#requestLess":
                self = .appBskyFeedDefsRequestless
            case "app.bsky.feed.defs#requestMore":
                self = .appBskyFeedDefsRequestmore
            case "app.bsky.feed.defs#clickthroughItem":
                self = .appBskyFeedDefsClickthroughitem
            case "app.bsky.feed.defs#clickthroughAuthor":
                self = .appBskyFeedDefsClickthroughauthor
            case "app.bsky.feed.defs#clickthroughReposter":
                self = .appBskyFeedDefsClickthroughreposter
            case "app.bsky.feed.defs#clickthroughEmbed":
                self = .appBskyFeedDefsClickthroughembed
            case "app.bsky.feed.defs#interactionSeen":
                self = .appBskyFeedDefsInteractionseen
            case "app.bsky.feed.defs#interactionLike":
                self = .appBskyFeedDefsInteractionlike
            case "app.bsky.feed.defs#interactionRepost":
                self = .appBskyFeedDefsInteractionrepost
            case "app.bsky.feed.defs#interactionReply":
                self = .appBskyFeedDefsInteractionreply
            case "app.bsky.feed.defs#interactionQuote":
                self = .appBskyFeedDefsInteractionquote
            case "app.bsky.feed.defs#interactionShare":
                self = .appBskyFeedDefsInteractionshare
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .appBskyFeedDefsRequestless:
                "app.bsky.feed.defs#requestLess"
            case .appBskyFeedDefsRequestmore:
                "app.bsky.feed.defs#requestMore"
            case .appBskyFeedDefsClickthroughitem:
                "app.bsky.feed.defs#clickthroughItem"
            case .appBskyFeedDefsClickthroughauthor:
                "app.bsky.feed.defs#clickthroughAuthor"
            case .appBskyFeedDefsClickthroughreposter:
                "app.bsky.feed.defs#clickthroughReposter"
            case .appBskyFeedDefsClickthroughembed:
                "app.bsky.feed.defs#clickthroughEmbed"
            case .appBskyFeedDefsInteractionseen:
                "app.bsky.feed.defs#interactionSeen"
            case .appBskyFeedDefsInteractionlike:
                "app.bsky.feed.defs#interactionLike"
            case .appBskyFeedDefsInteractionrepost:
                "app.bsky.feed.defs#interactionRepost"
            case .appBskyFeedDefsInteractionreply:
                "app.bsky.feed.defs#interactionReply"
            case .appBskyFeedDefsInteractionquote:
                "app.bsky.feed.defs#interactionQuote"
            case .appBskyFeedDefsInteractionshare:
                "app.bsky.feed.defs#interactionShare"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class FeedDefs_NotFoundPost: Codable {
        public var notFound: Bool
        public var uri: String

        public init(notFound: Bool, uri: String) {
            self.notFound = notFound
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case notFound
            case uri
        }
    }

    public class FeedDefs_PostView: Codable {
        public var author: ActorDefs_ProfileViewBasic
        public var cid: String
        public var embed: FeedDefs_PostView_Embed?
        public var indexedAt: String
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var likeCount: Int?
        public var record: LexiconTypeDecoder
        public var replyCount: Int?
        public var repostCount: Int?
        public var threadgate: FeedDefs_ThreadgateView?
        public var uri: String
        public var viewer: FeedDefs_ViewerState?

        public init(author: ActorDefs_ProfileViewBasic, cid: String, embed: FeedDefs_PostView_Embed?, indexedAt: String, labels: [comatprototypes.LabelDefs_Label]?, likeCount: Int?, record: LexiconTypeDecoder, replyCount: Int?, repostCount: Int?, threadgate: FeedDefs_ThreadgateView?, uri: String, viewer: FeedDefs_ViewerState?) {
            self.author = author
            self.cid = cid
            self.embed = embed
            self.indexedAt = indexedAt
            self.labels = labels
            self.likeCount = likeCount
            self.record = record
            self.replyCount = replyCount
            self.repostCount = repostCount
            self.threadgate = threadgate
            self.uri = uri
            self.viewer = viewer
        }

        enum CodingKeys: String, CodingKey {
            case author
            case cid
            case embed
            case indexedAt
            case labels
            case likeCount
            case record
            case replyCount
            case repostCount
            case threadgate
            case uri
            case viewer
        }
    }

    public enum FeedDefs_PostView_Embed: Codable {
        case embedImagesView(EmbedImages_View)
        case embedExternalView(EmbedExternal_View)
        case embedRecordView(EmbedRecord_View)
        case embedRecordWithMediaView(EmbedRecordWithMedia_View)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.embed.images#view":
                self = try .embedImagesView(.init(from: decoder))
            case "app.bsky.embed.external#view":
                self = try .embedExternalView(.init(from: decoder))
            case "app.bsky.embed.record#view":
                self = try .embedRecordView(.init(from: decoder))
            case "app.bsky.embed.recordWithMedia#view":
                self = try .embedRecordWithMediaView(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .embedImagesView(value):
                try container.encode("app.bsky.embed.images#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedExternalView(value):
                try container.encode("app.bsky.embed.external#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordView(value):
                try container.encode("app.bsky.embed.record#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordWithMediaView(value):
                try container.encode("app.bsky.embed.recordWithMedia#view", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedDefs_ReasonRepost: Codable {
        public var by: ActorDefs_ProfileViewBasic
        public var indexedAt: String

        public init(by: ActorDefs_ProfileViewBasic, indexedAt: String) {
            self.by = by
            self.indexedAt = indexedAt
        }

        enum CodingKeys: String, CodingKey {
            case by
            case indexedAt
        }
    }

    public class FeedDefs_ReplyRef: Codable {
        public var grandparentAuthor: ActorDefs_ProfileViewBasic?
        public var parent: FeedDefs_ReplyRef_Parent
        public var root: FeedDefs_ReplyRef_Root

        public init(grandparentAuthor: ActorDefs_ProfileViewBasic?, parent: FeedDefs_ReplyRef_Parent, root: FeedDefs_ReplyRef_Root) {
            self.grandparentAuthor = grandparentAuthor
            self.parent = parent
            self.root = root
        }

        enum CodingKeys: String, CodingKey {
            case grandparentAuthor
            case parent
            case root
        }
    }

    public enum FeedDefs_ReplyRef_Parent: Codable {
        case feedDefsPostView(FeedDefs_PostView)
        case feedDefsNotFoundPost(FeedDefs_NotFoundPost)
        case feedDefsBlockedPost(FeedDefs_BlockedPost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#postView":
                self = try .feedDefsPostView(.init(from: decoder))
            case "app.bsky.feed.defs#notFoundPost":
                self = try .feedDefsNotFoundPost(.init(from: decoder))
            case "app.bsky.feed.defs#blockedPost":
                self = try .feedDefsBlockedPost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsPostView(value):
                try container.encode("app.bsky.feed.defs#postView", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsNotFoundPost(value):
                try container.encode("app.bsky.feed.defs#notFoundPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsBlockedPost(value):
                try container.encode("app.bsky.feed.defs#blockedPost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public enum FeedDefs_ReplyRef_Root: Codable {
        case feedDefsPostView(FeedDefs_PostView)
        case feedDefsNotFoundPost(FeedDefs_NotFoundPost)
        case feedDefsBlockedPost(FeedDefs_BlockedPost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#postView":
                self = try .feedDefsPostView(.init(from: decoder))
            case "app.bsky.feed.defs#notFoundPost":
                self = try .feedDefsNotFoundPost(.init(from: decoder))
            case "app.bsky.feed.defs#blockedPost":
                self = try .feedDefsBlockedPost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsPostView(value):
                try container.encode("app.bsky.feed.defs#postView", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsNotFoundPost(value):
                try container.encode("app.bsky.feed.defs#notFoundPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsBlockedPost(value):
                try container.encode("app.bsky.feed.defs#blockedPost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedDefs_SkeletonFeedPost: Codable {
        public var feedContext: String?
        public var post: String
        public var reason: FeedDefs_SkeletonFeedPost_Reason?

        public init(feedContext: String?, post: String, reason: FeedDefs_SkeletonFeedPost_Reason?) {
            self.feedContext = feedContext
            self.post = post
            self.reason = reason
        }

        enum CodingKeys: String, CodingKey {
            case feedContext
            case post
            case reason
        }
    }

    public enum FeedDefs_SkeletonFeedPost_Reason: Codable {
        case feedDefsSkeletonReasonRepost(FeedDefs_SkeletonReasonRepost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#skeletonReasonRepost":
                self = try .feedDefsSkeletonReasonRepost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsSkeletonReasonRepost(value):
                try container.encode("app.bsky.feed.defs#skeletonReasonRepost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedDefs_SkeletonReasonRepost: Codable {
        public var repost: String

        public init(repost: String) {
            self.repost = repost
        }

        enum CodingKeys: String, CodingKey {
            case repost
        }
    }

    public class FeedDefs_ThreadgateView: Codable {
        public var cid: String?
        public var lists: [GraphDefs_ListViewBasic]?
        public var record: LexiconTypeDecoder?
        public var uri: String?

        public init(cid: String?, lists: [GraphDefs_ListViewBasic]?, record: LexiconTypeDecoder?, uri: String?) {
            self.cid = cid
            self.lists = lists
            self.record = record
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case cid
            case lists
            case record
            case uri
        }
    }

    public class FeedDefs_ThreadViewPost: Codable {
        public var parent: FeedDefs_ThreadViewPost_Parent?
        public var post: FeedDefs_PostView
        public var replies: [FeedDefs_ThreadViewPost_Replies_Elem]?

        public init(parent: FeedDefs_ThreadViewPost_Parent?, post: FeedDefs_PostView, replies: [FeedDefs_ThreadViewPost_Replies_Elem]?) {
            self.parent = parent
            self.post = post
            self.replies = replies
        }

        enum CodingKeys: String, CodingKey {
            case parent
            case post
            case replies
        }
    }

    public enum FeedDefs_ThreadViewPost_Parent: Codable {
        case feedDefsThreadViewPost(FeedDefs_ThreadViewPost)
        case feedDefsNotFoundPost(FeedDefs_NotFoundPost)
        case feedDefsBlockedPost(FeedDefs_BlockedPost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#threadViewPost":
                self = try .feedDefsThreadViewPost(.init(from: decoder))
            case "app.bsky.feed.defs#notFoundPost":
                self = try .feedDefsNotFoundPost(.init(from: decoder))
            case "app.bsky.feed.defs#blockedPost":
                self = try .feedDefsBlockedPost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsThreadViewPost(value):
                try container.encode("app.bsky.feed.defs#threadViewPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsNotFoundPost(value):
                try container.encode("app.bsky.feed.defs#notFoundPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsBlockedPost(value):
                try container.encode("app.bsky.feed.defs#blockedPost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public enum FeedDefs_ThreadViewPost_Replies_Elem: Codable {
        case feedDefsThreadViewPost(FeedDefs_ThreadViewPost)
        case feedDefsNotFoundPost(FeedDefs_NotFoundPost)
        case feedDefsBlockedPost(FeedDefs_BlockedPost)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.feed.defs#threadViewPost":
                self = try .feedDefsThreadViewPost(.init(from: decoder))
            case "app.bsky.feed.defs#notFoundPost":
                self = try .feedDefsNotFoundPost(.init(from: decoder))
            case "app.bsky.feed.defs#blockedPost":
                self = try .feedDefsBlockedPost(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .feedDefsThreadViewPost(value):
                try container.encode("app.bsky.feed.defs#threadViewPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsNotFoundPost(value):
                try container.encode("app.bsky.feed.defs#notFoundPost", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsBlockedPost(value):
                try container.encode("app.bsky.feed.defs#blockedPost", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedDefs_ViewerState: Codable {
        public var like: String?
        public var replyDisabled: Bool?
        public var repost: String?
        public var threadMuted: Bool?

        public init(like: String?, replyDisabled: Bool?, repost: String?, threadMuted: Bool?) {
            self.like = like
            self.replyDisabled = replyDisabled
            self.repost = repost
            self.threadMuted = threadMuted
        }

        enum CodingKeys: String, CodingKey {
            case like
            case replyDisabled
            case repost
            case threadMuted
        }
    }
}
