//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class NotificationListNotifications_Notification: Codable {
        public var author: ActorDefs_ProfileView
        public var cid: String
        public var indexedAt: String
        public var isRead: Bool
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var reason: String
        public var reasonSubject: String?
        public var record: LexiconTypeDecoder
        public var uri: String

        public init(author: ActorDefs_ProfileView, cid: String, indexedAt: String, isRead: Bool, labels: [comatprototypes.LabelDefs_Label]?, reason: String, reasonSubject: String?, record: LexiconTypeDecoder, uri: String) {
            self.author = author
            self.cid = cid
            self.indexedAt = indexedAt
            self.isRead = isRead
            self.labels = labels
            self.reason = reason
            self.reasonSubject = reasonSubject
            self.record = record
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case author
            case cid
            case indexedAt
            case isRead
            case labels
            case reason
            case reasonSubject
            case record
            case uri
        }
    }

    public enum NotificationListNotifications_Notification_Reason: RawRepresentable, Codable {
        public typealias RawValue = String

        case like
        case repost
        case follow
        case mention
        case reply
        case quote
        case starterpackJoined
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "like":
                self = .like
            case "repost":
                self = .repost
            case "follow":
                self = .follow
            case "mention":
                self = .mention
            case "reply":
                self = .reply
            case "quote":
                self = .quote
            case "starterpack-joined":
                self = .starterpackJoined
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .like:
                "like"
            case .repost:
                "repost"
            case .follow:
                "follow"
            case .mention:
                "mention"
            case .reply:
                "reply"
            case .quote:
                "quote"
            case .starterpackJoined:
                "starterpack-joined"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class NotificationListNotifications_Output: Codable {
        public var cursor: String?
        public var notifications: [NotificationListNotifications_Notification]
        public var seenAt: String?

        public init(cursor: String?, notifications: [NotificationListNotifications_Notification], seenAt: String?) {
            self.cursor = cursor
            self.notifications = notifications
            self.seenAt = seenAt
        }

        enum CodingKeys: String, CodingKey {
            case cursor
            case notifications
            case seenAt
        }
    }

    public enum NotificationListNotifications_Error: XRPCError {
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func NotificationListNotifications(client: any XRPCClientProtocol, cursor: String?, limit: Int?, seenAt: String?) async throws -> NotificationListNotifications_Output {
        let params: Parameters = ["cursor": .string(cursor), "limit": .integer(limit), "seenAt": .string(seenAt)]
        do {
            return try await client.fetch(endpoint: "app.bsky.notification.listNotifications", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw NotificationListNotifications_Error(error: error)
        }
    }
}
