//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public enum FeedPost_Embed: Codable {
        case embedImages(EmbedImages)
        case embedExternal(EmbedExternal)
        case embedRecord(EmbedRecord)
        case embedRecordWithMedia(EmbedRecordWithMedia)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.embed.images":
                self = try .embedImages(.init(from: decoder))
            case "app.bsky.embed.external":
                self = try .embedExternal(.init(from: decoder))
            case "app.bsky.embed.record":
                self = try .embedRecord(.init(from: decoder))
            case "app.bsky.embed.recordWithMedia":
                self = try .embedRecordWithMedia(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .embedImages(value):
                try container.encode("app.bsky.embed.images", forKey: .type)
                try value.encode(to: encoder)
            case let .embedExternal(value):
                try container.encode("app.bsky.embed.external", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecord(value):
                try container.encode("app.bsky.embed.record", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordWithMedia(value):
                try container.encode("app.bsky.embed.recordWithMedia", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedPost_Entity: Codable {
        public var index: FeedPost_TextSlice
        public var type: String
        public var value: String

        public init(index: FeedPost_TextSlice, type: String, value: String) {
            self.index = index
            self.type = type
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case index
            case type
            case value
        }
    }

    public enum FeedPost_Labels: Codable {
        case comAtprotoLabelDefsSelfLabels(comatprototypes.LabelDefs_SelfLabels)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "com.atproto.label.defs#selfLabels":
                self = try .comAtprotoLabelDefsSelfLabels(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .comAtprotoLabelDefsSelfLabels(value):
                try container.encode("com.atproto.label.defs#selfLabels", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class FeedPost_ReplyRef: Codable {
        public var parent: comatprototypes.RepoStrongRef
        public var root: comatprototypes.RepoStrongRef

        public init(parent: comatprototypes.RepoStrongRef, root: comatprototypes.RepoStrongRef) {
            self.parent = parent
            self.root = root
        }

        enum CodingKeys: String, CodingKey {
            case parent
            case root
        }
    }

    public class FeedPost_TextSlice: Codable {
        public var end: Int
        public var start: Int

        public init(end: Int, start: Int) {
            self.end = end
            self.start = start
        }

        enum CodingKeys: String, CodingKey {
            case end
            case start
        }
    }
}

public class appbskytypes_FeedPost: Codable {
    public let type = "app.bsky.feed.post"
    public var createdAt: String
    public var embed: appbskytypes.FeedPost_Embed?
    public var entities: [appbskytypes.FeedPost_Entity]?
    public var facets: [appbskytypes.RichtextFacet]?
    public var labels: appbskytypes.FeedPost_Labels?
    public var langs: [String]?
    public var reply: appbskytypes.FeedPost_ReplyRef?
    public var tags: [String]?
    public var text: String

    public init(createdAt: String, embed: appbskytypes.FeedPost_Embed?, entities: [appbskytypes.FeedPost_Entity]?, facets: [appbskytypes.RichtextFacet]?, labels: appbskytypes.FeedPost_Labels?, langs: [String]?, reply: appbskytypes.FeedPost_ReplyRef?, tags: [String]?, text: String) {
        self.createdAt = createdAt
        self.embed = embed
        self.entities = entities
        self.facets = facets
        self.labels = labels
        self.langs = langs
        self.reply = reply
        self.tags = tags
        self.text = text
    }

    enum CodingKeys: String, CodingKey {
        case type = "$type"
        case createdAt
        case embed
        case entities
        case facets
        case labels
        case langs
        case reply
        case tags
        case text
    }
}
