//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public class EmbedRecord: Codable {
        public var record: comatprototypes.RepoStrongRef

        public init(record: comatprototypes.RepoStrongRef) {
            self.record = record
        }

        enum CodingKeys: String, CodingKey {
            case record
        }
    }

    public class EmbedRecord_View: Codable {
        public var record: EmbedRecord_View_Record

        public init(record: EmbedRecord_View_Record) {
            self.record = record
        }

        enum CodingKeys: String, CodingKey {
            case record
        }
    }

    public enum EmbedRecord_View_Record: Codable {
        case embedRecordViewRecord(EmbedRecord_ViewRecord)
        case embedRecordViewNotFound(EmbedRecord_ViewNotFound)
        case embedRecordViewBlocked(EmbedRecord_ViewBlocked)
        case feedDefsGeneratorView(FeedDefs_GeneratorView)
        case graphDefsListView(GraphDefs_ListView)
        case labelerDefsLabelerView(LabelerDefs_LabelerView)
        case graphDefsStarterPackViewBasic(GraphDefs_StarterPackViewBasic)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.embed.record#viewRecord":
                self = try .embedRecordViewRecord(.init(from: decoder))
            case "app.bsky.embed.record#viewNotFound":
                self = try .embedRecordViewNotFound(.init(from: decoder))
            case "app.bsky.embed.record#viewBlocked":
                self = try .embedRecordViewBlocked(.init(from: decoder))
            case "app.bsky.feed.defs#generatorView":
                self = try .feedDefsGeneratorView(.init(from: decoder))
            case "app.bsky.graph.defs#listView":
                self = try .graphDefsListView(.init(from: decoder))
            case "app.bsky.labeler.defs#labelerView":
                self = try .labelerDefsLabelerView(.init(from: decoder))
            case "app.bsky.graph.defs#starterPackViewBasic":
                self = try .graphDefsStarterPackViewBasic(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .embedRecordViewRecord(value):
                try container.encode("app.bsky.embed.record#viewRecord", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordViewNotFound(value):
                try container.encode("app.bsky.embed.record#viewNotFound", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordViewBlocked(value):
                try container.encode("app.bsky.embed.record#viewBlocked", forKey: .type)
                try value.encode(to: encoder)
            case let .feedDefsGeneratorView(value):
                try container.encode("app.bsky.feed.defs#generatorView", forKey: .type)
                try value.encode(to: encoder)
            case let .graphDefsListView(value):
                try container.encode("app.bsky.graph.defs#listView", forKey: .type)
                try value.encode(to: encoder)
            case let .labelerDefsLabelerView(value):
                try container.encode("app.bsky.labeler.defs#labelerView", forKey: .type)
                try value.encode(to: encoder)
            case let .graphDefsStarterPackViewBasic(value):
                try container.encode("app.bsky.graph.defs#starterPackViewBasic", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }

    public class EmbedRecord_ViewBlocked: Codable {
        public var author: FeedDefs_BlockedAuthor
        public var blocked: Bool
        public var uri: String

        public init(author: FeedDefs_BlockedAuthor, blocked: Bool, uri: String) {
            self.author = author
            self.blocked = blocked
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case author
            case blocked
            case uri
        }
    }

    public class EmbedRecord_ViewNotFound: Codable {
        public var notFound: Bool
        public var uri: String

        public init(notFound: Bool, uri: String) {
            self.notFound = notFound
            self.uri = uri
        }

        enum CodingKeys: String, CodingKey {
            case notFound
            case uri
        }
    }

    public class EmbedRecord_ViewRecord: Codable {
        public var author: ActorDefs_ProfileViewBasic
        public var cid: String
        public var embeds: [EmbedRecord_ViewRecord_Embeds_Elem]?
        public var indexedAt: String
        public var labels: [comatprototypes.LabelDefs_Label]?
        public var likeCount: Int?
        public var replyCount: Int?
        public var repostCount: Int?
        public var uri: String
        public var value: LexiconTypeDecoder

        public init(author: ActorDefs_ProfileViewBasic, cid: String, embeds: [EmbedRecord_ViewRecord_Embeds_Elem]?, indexedAt: String, labels: [comatprototypes.LabelDefs_Label]?, likeCount: Int?, replyCount: Int?, repostCount: Int?, uri: String, value: LexiconTypeDecoder) {
            self.author = author
            self.cid = cid
            self.embeds = embeds
            self.indexedAt = indexedAt
            self.labels = labels
            self.likeCount = likeCount
            self.replyCount = replyCount
            self.repostCount = repostCount
            self.uri = uri
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case author
            case cid
            case embeds
            case indexedAt
            case labels
            case likeCount
            case replyCount
            case repostCount
            case uri
            case value
        }
    }

    public enum EmbedRecord_ViewRecord_Embeds_Elem: Codable {
        case embedImagesView(EmbedImages_View)
        case embedExternalView(EmbedExternal_View)
        case embedRecordView(EmbedRecord_View)
        case embedRecordWithMediaView(EmbedRecordWithMedia_View)
        case unknown(UnknownRecord)

        enum CodingKeys: String, CodingKey {
            case type = "$type"
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            switch type {
            case "app.bsky.embed.images#view":
                self = try .embedImagesView(.init(from: decoder))
            case "app.bsky.embed.external#view":
                self = try .embedExternalView(.init(from: decoder))
            case "app.bsky.embed.record#view":
                self = try .embedRecordView(.init(from: decoder))
            case "app.bsky.embed.recordWithMedia#view":
                self = try .embedRecordWithMediaView(.init(from: decoder))
            default:
                self = try .unknown(.init(from: decoder))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case let .embedImagesView(value):
                try container.encode("app.bsky.embed.images#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedExternalView(value):
                try container.encode("app.bsky.embed.external#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordView(value):
                try container.encode("app.bsky.embed.record#view", forKey: .type)
                try value.encode(to: encoder)
            case let .embedRecordWithMediaView(value):
                try container.encode("app.bsky.embed.recordWithMedia#view", forKey: .type)
                try value.encode(to: encoder)
            case .unknown:
                break
            }
        }
    }
}
