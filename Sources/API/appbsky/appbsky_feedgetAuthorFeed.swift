//
// DO NOT EDIT
//
// Generated by swift-atproto
//

import SwiftAtproto
import Foundation

extension appbskytypes {
    public enum FeedGetAuthorFeed_Filter: RawRepresentable, Codable {
        public typealias RawValue = String

        case postsWithReplies
        case postsNoReplies
        case postsWithMedia
        case postsAndAuthorThreads
        case unknown(String)

        public init?(rawValue: String) {
            switch rawValue {
            case "posts_with_replies":
                self = .postsWithReplies
            case "posts_no_replies":
                self = .postsNoReplies
            case "posts_with_media":
                self = .postsWithMedia
            case "posts_and_author_threads":
                self = .postsAndAuthorThreads
            default:
                self = .unknown(rawValue)
            }
        }

        public var rawValue: String {
            switch self {
            case .postsWithReplies:
                "posts_with_replies"
            case .postsNoReplies:
                "posts_no_replies"
            case .postsWithMedia:
                "posts_with_media"
            case .postsAndAuthorThreads:
                "posts_and_author_threads"
            case let .unknown(value):
                value
            }
        }

        public init(from decoder: any Decoder) throws {
            let rawValue = try String(from: decoder)
            self = Self (rawValue: rawValue)!
        }

        public func encode(to encoder: any Encoder) throws {
            try rawValue.encode(to: encoder)
        }
    }

    public class FeedGetAuthorFeed_Output: Codable {
        public var cursor: String?
        public var feed: [FeedDefs_FeedViewPost]

        public init(cursor: String?, feed: [FeedDefs_FeedViewPost]) {
            self.cursor = cursor
            self.feed = feed
        }

        enum CodingKeys: String, CodingKey {
            case cursor
            case feed
        }
    }

    public enum FeedGetAuthorFeed_Error: XRPCError {
        case blockedactor(String?)
        case blockedbyactor(String?)
        case unexpected(error: String?, message: String?)

        public init(error: UnExpectedError) {
            switch error.error {
            case "BlockedActor":
                self = .blockedactor(error.message)
            case "BlockedByActor":
                self = .blockedbyactor(error.message)
            default:
                self = .unexpected(error: error.error, message: error.message)
            }
        }

        public var error: String? {
            switch self {
            case .blockedactor:
                return "BlockedActor"
            case .blockedbyactor:
                return "BlockedByActor"
            case let .unexpected(error, _):
                return error
            }
        }

        public var message: String? {
            switch self {
            case let .blockedactor(message):
                return message
            case let .blockedbyactor(message):
                return message
            case let .unexpected(_, message):
                return message
            }
        }
    }

    public static func FeedGetAuthorFeed(client: any XRPCClientProtocol, actor: String, cursor: String?, filter: FeedGetAuthorFeed_Filter?, limit: Int?) async throws -> FeedGetAuthorFeed_Output {
        let params: Parameters = ["actor": .string(actor), "cursor": .string(cursor), "filter": .string(filter?.rawValue), "limit": .integer(limit)]
        do {
            return try await client.fetch(endpoint: "app.bsky.feed.getAuthorFeed", contentType: "*/*", httpMethod: .get, params: params, input: Bool?.none, retry: true)
        } catch let error as UnExpectedError {
            throw FeedGetAuthorFeed_Error(error: error)
        }
    }
}
